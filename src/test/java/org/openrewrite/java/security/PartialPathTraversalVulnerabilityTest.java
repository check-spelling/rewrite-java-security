/*
 * Copyright 2022 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.security;

import org.junit.jupiter.api.Test;
import org.openrewrite.DocumentExample;
import org.openrewrite.test.RecipeSpec;
import org.openrewrite.test.RewriteTest;

import static org.openrewrite.java.Assertions.java;

@SuppressWarnings("RedundantSuppression")
class PartialPathTraversalVulnerabilityTest implements RewriteTest {

    @Override
    public void defaults(RecipeSpec spec) {
        spec.recipe(new PartialPathTraversalVulnerability());
    }

    /**
     * <a href=https://github.com/ESAPI/esapi-java-legacy/commit/a0d67b75593878b1b6e39e2acc1773b3effedb2a">
     * ESAPI Vulnerability Fix</a>
     */
    @DocumentExample
    @Test
    void esapiCVE2022_23457() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void parenthesesWrappedCallChain() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;

              @SuppressWarnings("RedundantSuppression")
              class A {
                  @SuppressWarnings("ResultOfMethodCallIgnored")
                  void foo(File dir, File parent) {
                      (dir.getCanonicalPath()).startsWith((parent.getCanonicalPath()));
                  }
              }
              """,
            """
              import java.io.File;

              @SuppressWarnings("RedundantSuppression")
              class A {
                  @SuppressWarnings("ResultOfMethodCallIgnored")
                  void foo(File dir, File parent) {
                      dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath());
                  }
              }
              """
          )
        );
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Test
    void startsWithOnStringCall() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;

              class A {
                  void foo(File dir, File parent) {
                      dir.getCanonicalPath();
                      if ("potato".startsWith(parent.getCanonicalPath())) {
                          System.out.println("Hello!");
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithString() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentPath = parent.getCanonicalPath();
                      if (!dir.getCanonicalPath().startsWith(parentPath)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentPath = parent.getCanonicalPath();
                      if (!dir.getCanonicalFile().toPath().startsWith(parentPath)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithConcatenatedString() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir) throws IOException {
                      if (!dir.getCanonicalPath().startsWith("/usr" + "/dir")) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir) throws IOException {
                      if (!dir.getCanonicalFile().toPath().startsWith("/usr" + "/dir")) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathAsVariableDeclaration() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String canonicalPath = dir.getCanonicalPath();
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathAsVariableDeclarationTwice() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String canonicalPath = dir.getCanonicalPath();
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      String canonicalPath2 = dir.getCanonicalPath();
                      if (!canonicalPath2.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathAsVariableDeclarationTwiceDifferentOrder() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String canonicalPath = dir.getCanonicalPath();
                      String canonicalPath2 = dir.getCanonicalPath();
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!canonicalPath2.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathAsVariableDeclarationFromMethodCallSubject() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  File getChild() {
                      return null;
                  }

                  void foo(File parent) throws IOException {
                      String canonicalPath = getChild().getCanonicalPath();
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + getChild().getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  File getChild() {
                      return null;
                  }

                  void foo(File parent) throws IOException {
                      if (!getChild().getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + getChild().getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparator() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separator)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorChar() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separatorChar)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringAssignedToVariable() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringAssignedToVariableTwice() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      String parentCanonical2 = parent.getCanonicalPath();
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!dir.getCanonicalPath().startsWith(parentCanonical2)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      String parentCanonical2 = parent.getCanonicalPath();
                      if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical2)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorCharAssignedToVariable() {
        rewriteRun(
          //language=java
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithStaticImportOfFileSeparatorCharAssignedToVariable() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;
              import static java.io.File.separatorChar;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + separatorChar;
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorCharAssignedToVariableTwice() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      String parentCanonical2 = parent.getCanonicalPath() + File.separatorChar;
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!dir.getCanonicalPath().startsWith(parentCanonical2)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorAssignedToVariable() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + File.separator;
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorCharAssignedToVariableInIf() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              @SuppressWarnings("RedundantSuppression")
              class A {
                  @SuppressWarnings({
                      "IfStatementWithIdenticalBranches",
                      "MismatchedStringCase",
                      "UnusedAssignment",
                      "ResultOfMethodCallIgnored"
                  })
                  void foo(File dir, File parent, boolean branch) throws IOException {
                      String parentCanonical = null;
                      "test ".startsWith("somethingElse");
                      if (branch) {
                          parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      } else {
                          parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      }
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithFileSeparatorCharInOneBranchOfIf() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent, boolean branch) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      if (branch) {
                          parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      }
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent, boolean branch) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      if (branch) {
                          parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                      }
                      if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringEndingWithStringAssignedToVariable() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + "/potato";
                      if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath() + "/potato";
                      if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void keycloakExample() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.FileInputStream;
              import java.io.InputStream;
              import java.nio.file.Files;

              class A {
                  private File cacheDir;

                  InputStream foo(String... path) {
                      StringBuilder sb = new StringBuilder();
                      sb.append(cacheDir.getAbsolutePath());
                      for (String p : path) {
                          sb.append(File.separatorChar);
                          sb.append(p);
                      }
                      sb.append(".gz");

                      String filePath = sb.toString();
                      File encodedFile = new File(filePath);
                      try {
                          if (!encodedFile.getCanonicalPath().startsWith(cacheDir.getCanonicalPath())) {
                              return null;
                          }
                          return Files.newInputStream(encodedFile.toPath());
                      } catch (Exception e) {
                          return null;
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.FileInputStream;
              import java.io.InputStream;
              import java.nio.file.Files;

              class A {
                  private File cacheDir;

                  InputStream foo(String... path) {
                      StringBuilder sb = new StringBuilder();
                      sb.append(cacheDir.getAbsolutePath());
                      for (String p : path) {
                          sb.append(File.separatorChar);
                          sb.append(p);
                      }
                      sb.append(".gz");

                      String filePath = sb.toString();
                      File encodedFile = new File(filePath);
                      try {
                          if (!encodedFile.getCanonicalFile().toPath().startsWith(cacheDir.getCanonicalFile().toPath())) {
                              return null;
                          }
                          return Files.newInputStream(encodedFile.toPath());
                      } catch (Exception e) {
                          return null;
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringVariableWithFileSeparatorAppended() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) throws IOException {
                      String parentCanonical = parent.getCanonicalPath();
                      if (!dir.getCanonicalPath().startsWith(parentCanonical + File.separator)) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathStartsWithStringVariableWithSoloSlash() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir) throws IOException {
                      if (!dir.getCanonicalPath().startsWith("/")) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void whenThereAreTwoSourcesASaneAlternativeChangeIsMade() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File dir2, File parent, boolean conditional) throws IOException {
                      String canonicalPath = conditional ? dir.getCanonicalPath() : dir2.getCanonicalPath();
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;
              import java.nio.file.Paths;

              class A {
                  void foo(File dir, File dir2, File parent, boolean conditional) throws IOException {
                      String canonicalPath = conditional ? dir.getCanonicalPath() : dir2.getCanonicalPath();
                      if (!Paths.get(canonicalPath).normalize().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void getCanonicalPathAsVariableAssignmentInsideTryCatch() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class A {
                  void foo(File dir, File parent) {
                      String canonicalPath;
                      try {
                          canonicalPath = dir.getCanonicalPath();
                      } catch (IOException e) {
                          throw new RuntimeException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                          throw new RuntimeException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """,
            """
              import java.io.File;
              import java.io.IOException;
              import java.nio.file.Paths;

              class A {
                  void foo(File dir, File parent) {
                      String canonicalPath;
                      try {
                          canonicalPath = dir.getCanonicalPath();
                      } catch (IOException e) {
                          throw new RuntimeException("Invalid directory: " + dir.getCanonicalPath());
                      }
                      if (!Paths.get(canonicalPath).normalize().startsWith(parent.getCanonicalFile().toPath())) {
                          throw new RuntimeException("Invalid directory: " + dir.getCanonicalPath());
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void exampleDigital() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.io.IOException;

              class Test {
                  File rootLibraryPath = null;

                  public boolean isFileAccessible(File file) {
                      if (rootLibraryPath == null) return true;
                      try {
                          String root = rootLibraryPath.getCanonicalPath();
                          String path = file.getParentFile().getCanonicalPath();
                          return path.startsWith(root);
                      } catch (IOException e) {
                          return false;
                      }
                  }
              }
              """, """
              import java.io.File;
              import java.io.IOException;

              class Test {
                  File rootLibraryPath = null;

                  public boolean isFileAccessible(File file) {
                      if (rootLibraryPath == null) return true;
                      try {
                          String root = rootLibraryPath.getCanonicalPath();
                          return file.getParentFile().getCanonicalFile().toPath().startsWith(root);
                      } catch (IOException e) {
                          return false;
                      }
                  }
              }
              """
          )
        );
    }

    @Test
    void doesNotFixWenVulnerabilityIsZipSlip() {
        //language=java
        rewriteRun(
          java(
            """
              import java.io.File;
              import java.util.Enumeration;
              import java.util.zip.ZipEntry;
              import java.util.zip.ZipFile;
              import java.io.FileOutputStream;

              class A {
                  void zipSlip(File destination, ZipFile zip) {
                      Enumeration<? extends ZipEntry> entries = zip.entries();
                      while (entries.hasMoreElements()) {
                          ZipEntry e = entries.nextElement();
                          File f = new File(destination, e.getName());
                          new FileOutputStream(f);
                      }
                  }
              }
              """
          )
        );
    }

    @SuppressWarnings("ConstantConditions")
    @Test
    void staticCallToStartsWithDoesNotThrowAnException() {
        //language=java
        rewriteRun(
          java(
            """
              class Test {
                  private static final boolean test = "test/output".startsWith("test");
              }
              """
          )
        );
    }
}
